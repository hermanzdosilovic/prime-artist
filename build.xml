<project name="prime-artist" default="jar" basedir="."
	xmlns:cs="antlib:com.puppycrawl.tools.checkstyle" xmlns:jacoco="antlib:org.jacoco.ant">

	<description>
		Build file for project Prime Artist.
	</description>

	<!-- Global variables -->
	<property file="config.properties" />
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="src.java" location="${src}/main/java" />
	<property name="src.test" location="${src}/test/java" />
	<property name="build" location="build" />
	<property name="build.classes" location="${build}/classes" />
	<property name="build.test" location="${build}/test" />
	<property name="dist" location="dist" />
	<property name="doc" location="doc" />
	<property name="program"
		value="com.github.hermanzdosilovic.primeartist.PrimeArtist" />

	<!-- Jococo tool -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.home}/lib/jacocoant.jar" />
	</taskdef>

	<!-- CheckStyle tool -->
	<taskdef uri="antlib:com.puppycrawl.tools.checkstyle" resource="checkstyletask.properties"
		classpath="${checkstyle.home}/${checkstyle.jar}" />

	<!-- PMD library -->
	<path id="pmd.lib">
		<fileset dir="${pmd.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- FindBugs tool -->
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath path="${findbugs.home}/lib/findbugs-ant.jar" />
	</taskdef>

	<!-- PMD analysis -->
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
		classpathref="pmd.lib" />
	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"
		classpathref="pmd.lib" />

	<path id="compile.path">
		<pathelement location="${build.classes}" />
		<fileset dir="${lib}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="test.path">
		<path refid="compile.path" />
		<pathelement location="${build.test}" />
		<fileset dir="${junit.home}">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<!-- *********************** INIT ******************************** -->
	<target name="init">
		<!-- Time stamp -->
		<tstamp />
		<!-- Create the necessary directories -->
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<!-- *********************** COMPILE ***************************** -->
	<target name="compile" depends="init" description="Compiling sources">
		<mkdir dir="${build.classes}" />
		<!-- Translate Java code from ${src} in ${build} -->
		<javac srcdir="${src.java}" destdir="${build.classes}" encoding="UTF-8"
			debug="on" debuglevel="lines,vars,source" includeAntRuntime="false">
			<classpath>
				<fileset dir="${lib}" includes="**/*.jar" />
			</classpath>
		</javac>

	</target>


	<!-- *********************** COMPILE TESTS *********************** -->
	<target name="compile-tests" depends="compile" description="Compiling tests">
		<mkdir dir="${build.test}" />
		<!-- Translate Java code from ${src} in ${build} -->
		<javac srcdir="${src.test}" destdir="${build.test}"
			classpathref="test.path" encoding="UTF-8" debug="on" debuglevel="lines,vars,source"
			includeAntRuntime="false" />
	</target>


	<!-- *********************** RUN ********************************* -->
	<target name="run" depends="compile" description="Run program">
		<!-- Call virtual machine to run program -->
		<java classname="${program}" classpath="${build.classes}" fork="true">
			<jvmarg value="-Dfile.encoding=IBM852" />
			<classpath>
				<fileset dir="${lib}" includes="**/*.jar" />
			</classpath>
		</java>
	</target>


	<!-- *********************** RUN TESTS *************************** -->
	<target name="run-tests" depends="compile-tests" description="Run tests">
		<mkdir dir="${dist}/test-reports/xml" />
		<mkdir dir="${dist}/test-reports/coverage" />
		<mkdir dir="${dist}/test-reports/html" />
		<jacoco:coverage destfile="${dist}/test-reports/xml/jacoco.exec">
			<junit printsummary="yes" haltonfailure="yes" fork="true"
				forkmode="once">
				<classpath refid="test.path" />
				<formatter type="plain" />
				<formatter type="xml" />
				<batchtest fork="yes" todir="${dist}/test-reports/xml">
					<fileset dir="${src.test}">
						<include name="**/*Test*.java" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<junitreport todir="${dist}/test-reports/xml">
			<fileset dir="${dist}/test-reports/xml">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${dist}/test-reports/html" />
		</junitreport>

		<!-- Generate test coverage report -->
		<jacoco:report>
			<executiondata>
				<file file="${dist}/test-reports/xml/jacoco.exec" />
			</executiondata>
			<structure name="${ant.project.name}">
				<classfiles>
					<fileset dir="${build.classes}" />
					<fileset dir="${build.test}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.java}" />
					<fileset dir="${src.test}" />
				</sourcefiles>
			</structure>
			<html destdir="${dist}/test-reports/coverage" />
		</jacoco:report>
	</target>


	<!-- *********************** JAR ********************************* -->
	<target name="jar" depends="compile" description="Pack program in archive JAR">
		<!-- Make distribution directory -->
		<mkdir dir="${dist}" />

		<!-- Archive all -->
		<jar jarfile="${dist}/${ant.project.name}.jar">
			<fileset dir="${build.classes}" />
			<fileset dir="${src.java}" />
			<zipgroupfileset dir="${lib}" includes="*.jar" />
			<manifest>
				<attribute name="Main-Class" value="${program}" />
			</manifest>
		</jar>

		<!-- Archive binary for all -->
		<jar jarfile="${dist}/${ant.project.name}-bin.jar">
			<fileset dir="${build.classes}" />
			<zipgroupfileset dir="${lib}" includes="*.jar" />
			<manifest>
				<attribute name="Main-Class" value="${program}" />
			</manifest>
		</jar>

		<!-- Archive source for all -->
		<jar jarfile="${dist}/${ant.project.name}-src.jar">
			<fileset dir="${src.java}" />
			<zipgroupfileset dir="${lib}" includes="*.jar" />
			<manifest>
				<attribute name="Main-Class" value="${program}" />
			</manifest>
		</jar>

	</target>


	<!-- *********************** CLEAN ******************************* -->
	<target name="clean" description="Delete generated folders">
		<!-- Delete directories ${build} and ${dist} -->
		<delete dir="${build}" failonerror="false" />
		<delete dir="${dist}" failonerror="false" />
		<delete dir="${doc}" failonerror="false" />
	</target>


	<!-- *********************** JARRUN ****************************** -->
	<target name="jarrun" depends="jar" description="Run program from JAR">
		<!-- Call virtual machine to run program -->
		<java classname="${program}" classpath="${dist}/${ant.project.name}.jar"
			fork="true">
			<jvmarg value="-Dfile.encoding=IBM852" />
		</java>
	</target>


	<!-- *********************** JAVADOC ***************************** -->
	<target name="javadoc" depends="compile" description="Generating documentation">
		<!-- Make distribution directory -->
		<mkdir dir="${doc}" />
		<javadoc packagenames="com.*" sourcepath="${src.java}"
			defaultexcludes="yes" destdir="${doc}" Encoding="UTF-8" docencoding="UTF-8"
			charset="UTF-8" author="true" version="true" use="true"
			windowtitle="Prime Artist documentation">
			<doctitle><![CDATA[<h1>Prime Artist</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2014 ACME. All Rights Reserved.</i>]]></bottom>
		</javadoc>
	</target>


	<!-- *********************** FINDBUGS **************************** -->
	<target name="findbugs" depends="compile">
		<mkdir dir="${dist}/findbugs/xml" />
		<mkdir dir="${dist}/findbugs/html" />
		<findbugs home="${findbugs.home}" output="xml:withMessages"
			outputFile="${dist}/findbugs/xml/report.xml" workHard="true" effort="max"
			projectName="${ant.project.name}">
			<sourcePath path="${src.java}" />
			<class location="${build.classes}" />
		</findbugs>
		<xslt includes="report.xml" basedir="${dist}/findbugs/xml"
			destdir="${dist}/findbugs/html" extension=".html"
			style="${findbugs.home}/src/xsl/fancy.xsl">
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</xslt>
	</target>


	<!-- *********************** PMD ********************************* -->
	<target name="pmd" depends="compile">
		<mkdir dir="${dist}/pmd/xml" />
		<mkdir dir="${dist}/pmd/html" />
		<pmd shortFilenames="true" encoding="UTF-8">
			<ruleset>rulesets/java/basic.xml</ruleset>
			<ruleset>rulesets/java/braces.xml</ruleset>
			<ruleset>rulesets/java/codesize.xml</ruleset>
			<ruleset>rulesets/java/controversial.xml</ruleset>
			<ruleset>rulesets/java/design.xml</ruleset>
			<ruleset>rulesets/java/finalizers.xml</ruleset>
			<ruleset>rulesets/java/imports.xml</ruleset>
			<ruleset>rulesets/java/naming.xml</ruleset>
			<ruleset>rulesets/java/optimizations.xml</ruleset>
			<ruleset>rulesets/java/strictexception.xml</ruleset>
			<ruleset>rulesets/java/strings.xml</ruleset>
			<ruleset>rulesets/java/sunsecure.xml</ruleset>
			<ruleset>rulesets/java/typeresolution.xml</ruleset>
			<ruleset>rulesets/java/unusedcode.xml</ruleset>
			<ruleset>rulesets/java/unnecessary.xml</ruleset>
			<formatter type="xml" toFile="${dist}/pmd/xml/pmd_report.xml" />
			<fileset dir="${src.java}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
		<cpd minimumTokenCount="10" outputFile="${dist}/pmd/xml/cpd_report.xml"
			format="xml" encoding="UTF-8">
			<fileset dir="src">
				<include name="**/*.java" />
			</fileset>
		</cpd>
		<xslt includes="cpd_report.xml" basedir="${dist}/pmd/xml"
			destdir="${dist}/pmd/html" extension=".html"
			style="${pmd.home}/etc/xslt/cpdhtml.xslt">
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</xslt>
		<xslt includes="pmd_report.xml" basedir="${dist}/pmd/xml"
			destdir="${dist}/pmd/html" extension=".html"
			style="${pmd.home}/etc/xslt/wz-pmd-report.xslt">
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</xslt>
	</target>


	<!-- *********************** CS ********************************** -->
	<target name="cs" depends="compile">
		<mkdir dir="${dist}/checkstyle/xml" />
		<mkdir dir="${dist}/checkstyle/html" />

		<cs:checkstyle config="${checkstyle.home}/${checkstyle.style}"
			failOnViolation="false">
			<fileset dir="${src.java}" includes="**/*.java" />
			<formatter type="xml"
				toFile="${dist}/checkstyle/xml/checkstyle_errors.xml" />
		</cs:checkstyle>

		<xslt basedir="${dist}/checkstyle/xml" destdir="${dist}/checkstyle/html"
			extension=".html" style="${checkstyle.home}/contrib/checkstyle-frames.xsl">
			<classpath>
				<fileset dir="${xalan.home}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</xslt>
	</target>


	<!-- *********************** QUALITY ***************************** -->
	<target name="quality" depends="compile-tests, cs, pmd, findbugs, run-tests">
	</target>


	<!-- *********************** REPORTS ***************************** -->
	<target name="reports" depends="quality, javadoc, jar">
	</target>

	<!-- *********************** GITINIT ***************************** -->
	<target name="gitinit" depends="clean, javadoc, jar">
		<delete dir="${build}" failonerror="false" />
	</target>

</project>
